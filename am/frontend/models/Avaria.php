<?php

namespace app\models;

use common\models\Utilizador;
use Yii;
use app\models\Dispositivo;

/**
 * This is the model class for table "avaria".
 *
 * @property int $idAvaria
 * @property string $descricao
 * @property int $tipo
 * @property int $estado
 * @property int $gravidade
 * @property string $data
 * @property int $idDispositivo
 * @property int $idUtilizador
 * @property int|null $idRelatorio
 *
 * @property Utilizador $idUtilizador0
 * @property Dispositivo $idDispositivo0
 * @property Relatorio[] $relatorios
 */
class Avaria extends \yii\db\ActiveRecord
{
    public $search;
    public $referencia;
    public $count;
    public $estado_array = array('Nao Resolvido', 'Em Resolucao', 'Resolvido');
    public $tipo_array = array('Hardware','Software');
    public $gravidade_array = array('NÃ£o Funcional','Funcional');
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'avaria';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['descricao', 'tipo', 'gravidade', 'data', 'idDispositivo', 'estado'], 'required'],
            [['tipo', 'estado', 'gravidade', 'idDispositivo', 'idRelatorio'], 'integer'],
            [['data'], 'safe'],
            [['referencia'], 'safe'],
            [['descricao'], 'string', 'max' => 200],
            [['idDispositivo'], 'exist', 'skipOnError' => true, 'targetClass' => Dispositivo::className(), 'targetAttribute' => ['idDispositivo' => 'idDispositivo']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'idAvaria' => 'Id Avaria',
            'descricao' => 'Descricao',
            'tipo' => 'Tipo',
            'estado' => 'Estado',
            'gravidade' => 'Gravidade',
            'data' => 'Data',
            'idDispositivo' => 'Id Dispositivo',
            'idRelatorio' => 'Id Relatorio',
        ];
    }

    /**
     * Gets query for [[IdDispositivo0]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getIdDispositivo0()
    {
        return $this->hasOne(Dispositivo::className(), ['idDispositivo' => 'idDispositivo']);
    }

    /**
     * Gets query for [[IdUtilizador0]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getIdUtilizador0()
    {
        return $this->hasOne(Utilizador::className(), ['idUtilizador' => 'idUtilizador']);
    }

    /**
     * Gets query for [[Relatorios]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getRelatorios()
    {
        return $this->hasMany(Relatorio::className(), ['idAvaria' => 'idAvaria']);
    }

    public function getGravidade(){
        switch ($this->gravidade){
            case 0:
                $gravidade = "Nao funcional";
                break;
            case 1:
                $gravidade = "Funcional";
                break;
        }
        return $gravidade;
    }

    public function getTipo(){
        switch ($this->tipo){
            case 0:
                $tipo = "Hardware";
                break;
            case 1:
                $tipo = "Software";
                break;
        }
        return $tipo;
    }

    public function getEstado(){
        switch ($this->estado){
            case 0:
                return ['style' => 'background-color: orange'];
            case 1:
                return ['style' => 'background-color: yellow'];
            case 2:
                return ['style' => 'background-color: green'];
        }
    }

    public function beforeDelete()
    {
        $query = "SELECT * FROM AVARIA WHERE idAvaria != ".$this->idAvaria." and idDispositivo = ".$this->idDispositivo." and (estado = 1 or estado = 2) and gravidade = 0";

        if($this->idRelatorio != null){
            $modelRelatorio = Relatorio::findOne($this->idRelatorio);
            $modelRelatorio->delete();
        }

        if($this->estado != 2 && (!Avaria::findBySql($query)->all() && ($this->gravidade == 0 || $this->gravidade == 1))){
            $this->idDispositivo0->estado = 1;
        }else{
            $this->idDispositivo0->estado = 0;
        }

        $query = Avaria::find()
            ->where('(estado = 2 or (gravidade = 1 and (estado = 0 or estado = 1)))')
            ->count('DISTINCT(idDispositivo)');

        $this->idDispositivo0->save();

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {
        $this->idUtilizador = Yii::$app->user->identity->idUtilizador;

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $query = "SELECT * FROM AVARIA WHERE idAvaria != ".$this->idAvaria." and idDispositivo = ".$this->idDispositivo." and (estado = 0 or estado = 1) and gravidade = 0";

        if($this->gravidade == 1 && !Avaria::findBySql($query)->all()){
            $this->idDispositivo0->estado = 1;
        }else{
            if(($this->estado == 0 || $this->estado == 1) && $this->gravidade == 0){
                if(!Avaria::findBySql($query)->all()){
                    $this->idDispositivo0->estado = 0;
                }
            }elseif($this->estado == 2 && (!Avaria::findBySql($query)->all() && ($this->gravidade == 0 || $this->gravidade == 1))){
                $this->idDispositivo0->estado = 1;
            }
        }


        $this->idDispositivo0->save();

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }
}
